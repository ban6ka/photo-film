<?php
/**
 * Implements hook_menu().
 */
function commerce_ua_menu() {
  $items = array();

  $items['admin/config/system/commerce-ua'] = array(
    'title' => t('Commerce settings form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ua_settings_form'),
    'access callback' => TRUE,
   // 'access arguments' => array('administer photo film form'),
    'type' => MENU_NORMAL_ITEM,
    'file path' => drupal_get_path('module', 'commerce_ua'),
    'file' => 'commerce_ua.admin.inc'
  );

  $items['commerce-ua/return-url'] = array(
    'title' => t('Return url'),
    'page callback' => 'commerce_ua_return_url',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  
  $items['commerce-ua/server-url'] = array(
    'title' => t('Server url'),
    'page callback' => 'commerce_ua_server_url',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Return url for privat 24 api 
 */
function commerce_ua_return_url() {
  $fail = FALSE;

  $_POST = (!empty($_POST) ? $_POST : array());

  watchdog('server_url', var_export($_POST, TRUE));

  $xml = base64_decode($_POST['operation_xml']); 
  
  $signature = variable_get('commerce_ua_privat24_merchant_signature', '');
  $sign = base64_encode(sha1($signature . $xml . $signature, 1));
  
  if (empty($_POST['signature']) || $sign != $_POST['signature']) {
    $fail = TRUE;
  }
  else {
    // parce post parameter;
    $response = xml2array($xml);
    $options = $response['response'][0];

    watchdog('server_url_options', var_export($options, TRUE));  
    // check for the status of the payment
    if (empty($options['status'][0]) || $options['status'][0] != 'success' || empty($options['order_id'][0])) {
      $fail = TRUE;   
    }
    else {
      // try to parce order key and retrieve node id and load that node 
      $nid = str_replace('fotofilm1_', '', $options['order_id'][0]);
      if ($node = node_load($nid)) {
        $node->status = 1;
        node_save($node);
      }
      else {
        $fail = TRUE;
      }
    }
  }
  
  if ($fail) {
    $redirect_path = variable_get('commerce_ua_privat24_fail_url', 'commerce-ua/server-url');
  } 
  else {
    $redirect_path = variable_get('commerce_ua_privat24_success_url', 'commerce-ua/return-url');
  };

  drupal_goto($redirect_path);
}

/**
 * Helper function to convert xml in to array
 */
function xml2array($originalXML, $attributes=true) {
  $xmlArray = array();
  $search = $attributes ? '|<((\S+)(.*))\s*>(.*)</\2>|Ums' : '|<((\S+)()).*>(.*)</\2>|Ums';
 
  // normalize data
  $xml = preg_replace('|>\s*<|', ">\n<", $originalXML); // one tag per line
  $xml = preg_replace('|<\?.*\?>|', '', $xml);            // remove XML declarations
  $xml = preg_replace('|<(\S+?)(.*)/>|U', '<$1$2></$1>', $xml); //Expand singletons
 
  if (!preg_match_all($search, $xml, $xmlMatches)) {
    return trim($originalXML);      // bail out - no XML found     
  }
         
  foreach ($xmlMatches[1] as $index => $key) {
    if (!isset($xmlArray[$key])) {
      $xmlArray[$key] = array();
    }  
    $xmlArray[$key][] = xml2array($xmlMatches[4][$index], $attributes);  
  }

  return $xmlArray;
}

/**
 * Sserver url for privat 24 api 
 */
function commerce_ua_server_url() {
  commerce_ua_return_url();
}

/**
 * Privat 24 checkout form
 */
function commerce_ua_privat_bank_form($form, $form_state) {
  unset($form['ctools_trail']);
  unset($form['buttons']['cancel']);
  unset($form['buttons']['previous']);

  $form['#attributes'] = array();
  $form['#attributes']['class'] = array();
  $form['#attributes']['class'][] = 'photo-film-form';

  $order = photo_film_form_cache_get(1);

  $success_message = variable_get('photo_film_form_success_message', '');

  $form['success_message'] = array(
      '#type' => 'markup',
      '#markup' => (!empty($success_message['value']) ? $success_message['value'] : '')
  );

  // finish submit button
  if (!empty($form['buttons']['return'])) {
    $form['buttons']['return']['#value'] = t("Order");
    $form['buttons']['return'] = photo_film_form_render_submit_button($form['buttons']['return'], "");
    $form['buttons']['return']['#prefix'] = '<hr class="separator" /><div class="form-button-container"><h1></h1><div class="form-button-wrap active">';
  }

  $form['#action'] = 'https://www.liqpay.com/?do=clickNbuy';
  
  $form['signature'] = array(
    '#type' => 'hidden',
    '#name' => 'signature',
    '#value' => '',
  );
  
  global $base_url;

  $merch_id = variable_get('commerce_ua_privat24_merchant_id', '');

  $xml='<request>
          <version>1.2</version>
          <merchant_id>' . $merch_id . '</merchant_id>
          <result_url>' . $base_url . '/commerce-ua/return-url' . '</result_url>
          <server_url>' . $base_url . '/commerce-ua/server-url' . '</server_url>
          <order_id>fotofilm1_' .  $order->order_info['id'] . '</order_id>
          <amount>' . photo_film_form_calculate_amount($order) . '</amount>
          <currency>UAH</currency>
          <pay_way>card, liqpay, delayed</pay_way>
          <description>Film purchase</description>
          <default_phone>' . str_replace(array(' ', '(', ')', '-', '+'), '', $order->order_info['mobile']) . '</default_phone> 
        </request>';
  
  $form['operation_xml'] = array(
    '#type' => 'hidden',
    '#name' => 'operation_xml',
    '#value' => base64_encode($xml),
  );

  $merchant_sign = variable_get('commerce_ua_privat24_merchant_signature', '');
  $sign = base64_encode(sha1($merchant_sign . $xml . $merchant_sign, 1));

  $form['signature'] = array(
    '#type' => 'hidden',
    '#name' => 'signature',
    '#value' => $sign,
  );

  return $form;
}
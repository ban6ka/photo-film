<?php
/**
 * Implementation of hook_theme
 */
function photo_film_form_theme($existing, $type, $theme, $path) {
  return array(
    'photo_film_form_select_theme_wrapper' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'photo_film_form'),
      'file' => '/includes/photo_film_select_theme_step.inc'
    ),
    'photo_film_form_select_theme_content' => array(
      'variables' => array(
        'title' => NULL,
        'items' => array(),
      ),
      'template' => '/templates/photo-film-form-theme-step-content',
      'path' => drupal_get_path('module', 'photo_film_form'),
    ),
    'photo_film_form_select_style_wrapper' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'photo_film_form'),
      'file' => '/includes/photo_film_select_style_step.inc'
    ),
    'photo_film_form_select_style_content' => array(
      'variables' => array(
        'title' => NULL,
        'items' => array(),
      ),
      'template' => '/templates/photo-film-form-style-step-content',
      'path' => drupal_get_path('module', 'photo_film_form'),
    ),
    'photo_film_select_music_step_wrapper' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'photo_film_form'),
      'file' => '/includes/photo_film_select_music_step.inc'
    ),
    'photo_film_select_music_step_content' => array(
      'variables' => array(
        'title' => NULL,
        'items' => array(),
        'warning' => NULL,
        'default_value' => NULL,
      ),
      'template' => '/templates/photo-film-select-music-step-content',
      'path' => drupal_get_path('module', 'photo_film_form'),
    ),
    'photo_film_select_picture_step_content' => array(
      'variables' => array(
        'title' => NULL,
        'warning' => NULL,
      ),
      'template' => '/templates/photo-film-select-picture-step-content',
      'path' => drupal_get_path('module', 'photo_film_form'),
    ),
    'photo_film_form_breadcrumb' => array(
      'render element' => 'form',
      'variables' => array(
        'steps' => array(),
        'current' => NULL,
      ),
      'template' => '/templates/photo-film-form-form-navigation',
      'path' => drupal_get_path('module', 'photo_film_form'),
    ),
    'photo_film_form_textfield' => array(
      'render element' => 'element',
      'template' => '/templates//elements/photo-film-form-textfield',
      'path' => drupal_get_path('module', 'photo_film_form'),
    ),
    'photo_film_form_select' => array(
      'render element' => 'element',
      'template' => '/templates/elements/photo-film-form-select',
      'path' => drupal_get_path('module', 'photo_film_form'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function photo_film_form_menu() {
  $items['admin/config/user-interface/photo-film'] = array(
    'title' => t('Photo film settings form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('photo_film_form_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer photo film form'),
    'type' => MENU_NORMAL_ITEM,
    'file path' => drupal_get_path('module', 'photo_film_form'),
    'file' => 'photo_film_form.admin.inc'
  );

  $items['admin/photo-film/file/save'] = array(
    'title' => t('Saves file stream'),
    'page callback' => 'photo_film_form_save_file_wrapper',
    'access callback' => TRUE,
    'file path' => drupal_get_path('module', 'photo_film_form') . '/includes',
    'file' => 'photo_film_form_file_handler.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/photo-film/file/remove'] = array(
    'title' => t('Saves file stream'),
    'page callback' => 'photo_film_form_delete_file',
    'access callback' => TRUE,
    'file path' => drupal_get_path('module', 'photo_film_form') . '/includes',
    'file' => 'photo_film_form_file_handler.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of template_process()
 */
function photo_film_form_process(&$variables, $hook) {
  if ($hook == 'photo_film_form_textfield') {
    element_set_attributes($variables['element'], array('id', 'name', 'value', 'size', 'maxlength'));
    _form_set_class($variables['element'], array('form-text'));
    $variables['element']['#attributes']['type'] = 'text';
  }

  if ($hook == 'photo_film_form_select') {
    element_set_attributes($variables['element'], array('id', 'name', 'size'));
    _form_set_class($variables['element'], array('form-select'));
  }
}

/**
 * Implementation of hook_permission
 */
function photo_film_form_permission() {
  return array(
    'administer photo film form' => array(
      'title' => t('Administer photo film form module'),
      'description' => t('Perform administration of photo film form module.'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function photo_film_form_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Clears the wizard cache.
 *
 * @param integer $id
 *   cache id.
 */
function photo_film_form_cache_clear($id) {
  ctools_include('object-cache');
  ctools_object_cache_clear('photo_film_form', $id);
}

/**
 * Stores our little cache so that we can retain data from form to form.
 *
 * @param integer $id
 *   cache id.
 * @param object $object
 *   object with form values.
 */
function photo_film_form_cache_set($id, $object) {
  ctools_include('object-cache');
  ctools_object_cache_set('photo_film_form', $id, $object);
}

/**
 * Gets the current object from the cache, or default.
 *
 * @param integer $id
 *   cache id.
 *
 * @return object
 *   cache with stored stuff.
 */
function photo_film_form_cache_get($id) {
  ctools_include('object-cache');
  $object = ctools_object_cache_get('photo_film_form', $id);
  if (!$object) {
    // Create a default object.
    $object = new stdClass;
  }

  return $object;
}

/**
 * Handles the 'next' click on the add/edit pane form wizard.
 *
 * All we need to do is store the updated pane in the cache.
 */
function photo_film_form_wizard_next(&$form_state) {
  photo_film_form_cache_set($form_state['object_id'], $form_state['object']);
}

/**
 * Implements hook_form_alter();
 */
function photo_film_form_alter(&$form, &$form_state, $form_id) {
  if (arg(0) != 'admin' && strpos($form_id, 'photo_film_') !== FALSE && !empty($form['#action'])) {
      if (strpos($form['#action'], '/') == 0) {
        $form['#action'] = substr($form['#action'], 1);
      }

      $form['#action'] = url($form['#action'], array('fragment' => 'content'));
  }
}


/**
 * Handles the 'finish' click on teh add/edit pane form wizard.
 *
 * All we need to do is set a flag so the return can handle adding
 * the pane.
 */
function photo_film_form_wizard_finish(&$form_state) {
  // photo_film_form_cache_clear(1);
  $form_state['complete'] = TRUE;
}

/**
 * Handles the 'cancel' click on the add/edit pane form wizard.
 */
function photo_film_form_wizard_cancel(&$form_state) {
  //photo_film_form_cache_clear(1);
  $form_state['cancel'] = TRUE;
}

/**
 * Returns form with success message.
 *
 * @param object $object
 *   object with form values.
 *
 * @return array
 *   returns renderable array for multistep form result output.
 */
function photo_film_form_insert_order($form, &$form_state) {
  $object = $form_state['object'];

  if ($object->current_step == 'order_info') {
    //create an archive with order information an files
    module_load_include('inc', 'photo_film_form', 'includes/photo_film_form_file_handler');
    // get the information about files to store them in archive
    $files = photo_film_form_prepare_files($object);
    // todo change archive name
    // create an archive
    $name = 'order_' . photo_film_form_get_next_order_id();
    $archive = photo_film_form_create_archive($files, $name);
    //photo_film_node_order.inc
    module_load_include('inc', 'photo_film_form', 'includes/photo_film_node_order');
    photo_film_create_order_node($object, $archive, $name);
  }
}

/**
 * Define array for ctools multistep wizard.
 * @return array
 */
function photo_film_form_ctools_multi_step_form_info() {
  return array(
    'id' => 'photo_film_form',
    'path' => "photo-film-form/nojs/%step",
    'show trail' => TRUE,
    'show back' => TRUE,
    'show cancel' => TRUE,
    'show return' => FALSE,
    'next callback' => 'photo_film_form_wizard_next',
    'finish callback' => 'photo_film_form_wizard_finish',
    'cancel callback' => 'photo_film_form_wizard_cancel',
    // we need to override this
    'order' => array(
      'themes' => t('Select theme for your video'),
      'styles' => t('Select style for your video'),
      'music' => t('Select music for your video'),
      'photos' => t('Select photos for your video'),
      'order' => t('Order'),
      'finish' => t('Finish'),
    ),
    'forms' => array(
      'themes' => array(
        'form id' => 'photo_film_form_select_theme_step',
        'include' => drupal_get_path('module', 'photo_film_form') . '/includes/photo_film_select_theme_step.inc',
      ),
      'styles' => array(
        'form id' => 'photo_film_form_select_style_step',
        'include' => drupal_get_path('module', 'photo_film_form') . '/includes/photo_film_select_style_step.inc',
      ),
      'music' => array(
        'form id' => 'photo_film_form_select_music_step',
        'include' => drupal_get_path('module', 'photo_film_form') . '/includes/photo_film_select_music_step.inc',
      ),
      'photos' => array(
        'form id' => 'photo_film_select_picture_step',
        'include' => drupal_get_path('module', 'photo_film_form') . '/includes/photo_film_select_picture_step.inc',
      ),
      'order' => array(
        'form id' => 'photo_film_form_order',
        'include' => drupal_get_path('module', 'photo_film_form') . '/includes/photo_film_order.inc',
      ),
      'finish' => array(
        'form id' => 'commerce_ua_privat_bank_form',
        'include' => drupal_get_path('module', 'commerce_ua') . '/commerce_ua.module',
      ),
    ),
  );
}


/**
 * Function that calculates total amount of the order
 * @param $cache object that stores info about users selects
 * @return total amount of the order
 */
function photo_film_form_calculate_amount($cache) {
  $pictures_count = isset($cache->pictures) ? count($cache->pictures) : 0;
  $music = !empty($cache->music['fid']);

  $style_price = 1;

  if (!empty($cache->style['style']) && $style = taxonomy_term_load($cache->style['style'])) {
    if ($style_price = field_get_items('taxonomy_term', $style, 'field_coefficient')) {
      $style_price = $style_price[0]['value'];
    }
  }

  $theme_price = 1;
  if (!empty($cache->theme['theme']) && $theme = taxonomy_term_load($cache->theme['theme'])) {
    if ($theme_price = field_get_items('taxonomy_term', $theme, 'field_coefficient')) {
      $theme_price = $theme_price[0]['value'];
    }
  }
  
  $discount = (!empty($cache->order_info['discount']['value']) ? 1 - $cache->order_info['discount']['value'] / 100 : 1);
  $format_price = 1;

  if (!empty($cache->order_info['format']) && $format = $cache->order_info['format']) {
    $format = taxonomy_term_load($format);

    if ($format_price = field_get_items('taxonomy_term', $format, 'field_coefficient')) {
      $format_price = $format_price[0]['value'];
    }
  }

  return ($pictures_count * $style_price * $theme_price * $format_price + $music * 30) * $discount; 
}

/**
 * Callback for ajax on the last step on our form to get the total amount of the order
 * returns recalculated amount of order
 */
function photo_film_form_order_get_amount(&$form, &$form_state) {
  $cache = $form_state['object'];

  // try to add new property to the object
  if (!empty($form_state['values']['format'])) {
    $cache->order_info = ((!empty($cache->order_info)) ? $cache->order_info : array());
    $cache->order_info['format'] = $form_state['values']['format'];
  }

  $amount = photo_film_form_calculate_amount($cache);

  return photo_film_form_order_get_amount_element($amount);
}

/**
 * Callback for ajax on the last step on our form to verify an apply discount
 * returns recalculated amount of order
 */
function photo_film_form_order_apply_discount($form, &$form_state) {
  $form_state['object']->order_info['discount'] = array();
  
  if (!empty($form_state['values']['discount'])) {
    $form_state['object']->order_info['discount']['value'] = photo_film_form_order_get_discount($form_state['values']['discount']);
  }

  return photo_film_form_order_get_amount($form, $form_state);
}

/**
 * Helper function to get discount value by it's code
 */
function photo_film_form_order_get_discount($code = '') {
  $value = FALSE;
  if (!empty($code)) {
    // try to verify discount key
    $query = db_select('node', 'n');
    $query -> join('field_data_field_discount_key', 'd', 'd.entity_id=n.nid');
    $query -> fields('n', array('nid'));
    $query -> condition('n.type', 'discount');
    $query -> condition('n.status', 1);
    $query -> condition('d.field_discount_key_value', $code);
    $result = $query-> execute();

    // fetch and proceed results
    if ($discount_node_id = $result->fetchAssoc()) {
      $discount_node_id = array_pop($discount_node_id);
      if ($discount_node = node_load($discount_node_id)) {
        if ($discount_value = field_get_items('node', $discount_node, 'field_discount_value', $discount_node->language)) {
          $value = $discount_value[0]['value'];
        }
      }
    }
  }

  return $value;
}
/**
 * Total amount element of the last step
 * @param $amount
 */
function photo_film_form_order_get_amount_element($amount) {
  $title = '<label>' . t('Pay amount') . ':</label>';

  return array(
    '#prefix' => '<div class="form-item payment-item" id="order-amount">',
    '#title' => t('Pay amount') . ':',
    '#type' => 'markup',
    '#markup' => $title . '<span>' . $amount . ' UAH</span>',
    '#suffix' => '</div>',
    '#weight' => -7,
    '#amount' => $amount,
  );
}

/**
 * Layout of submit button
 * @param $button
 * @param @add_text - text before button
 */
function photo_film_form_render_submit_button($button, $add_text = 'Did you select?') {
  $button['#prefix'] = '<hr class="separator" />' .
    '<div class="form-button-container">' .
    '<h1>' . t($add_text) . '</h1>' .
    '<div class="form-button-wrap">';
  $button['#suffix'] = '</div></div>';
  $button['#tree'] = TRUE;

  return $button;
}

/**
 * Return the next node id
 */
function photo_film_form_get_next_order_id() {
  $query = db_query("SELECT MAX(nid) as nid from node where 1");
  $result = $query->fetchAssoc();

  return (!empty($result['nid']) ? $result['nid'] + 1 : 1);
}

/**
 * Implementation of hook_form_alter
 */
function photo_film_form_form_alter(&$form, &$form_state, $form_id) {
  // ensure that this is music node edit form
  if ($form_id == 'music_node_form' && !empty($form['field_style'][LANGUAGE_NONE]['#options'])) {
    // load vocabulary from settings form 
    if ($themes_vocabulary_vid = variable_get('photo_film_form_theme_vid', FALSE)) {
      // load vocabulary tree
      if ($terms = taxonomy_get_tree($themes_vocabulary_vid)) {
        // unset all terms that are not in the first level
        foreach ($terms as $value) {
          if ($value->depth != 0) {
            unset($form['field_style'][LANGUAGE_NONE]['#options'][$value->tid]);
          }
        }
      }
    }
  }
}


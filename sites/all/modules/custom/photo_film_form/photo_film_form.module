<?php

/**
 * Implementation of hook_theme
 */
function photo_film_form_theme($existing, $type, $theme, $path) {
  return array(
    'photo_film_form_choose_theme_step_theme' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'photo_film_form'),
      'file' => '/includes/photo_film_choose_theme_step.inc'
    ),
    'photo_film_form_choose_style_step_theme' => array(
      'render element' => 'form',
      'path' => drupal_get_path('module', 'photo_film_form'),
      'file' => '/includes/photo_film_style_step.inc'
    ),
  );
}

/**
 * Implements hook_menu().
 */
function photo_film_form_menu() {
  $items['admin/config/user-interface/photo-film'] = array(
    'title' => t('Photo film settings form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('photo_film_form_settings_form'),
    // todo add permission
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file path' => drupal_get_path('module', 'photo_film_form'),
    'file' => 'photo_film_form.admin.inc'
  );

  $items['admin/photo-film/music'] = array(
    'title' => t('Saves file stream'),
    'page callback' => 'photo_film_music_save_file',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Page callback for admin/photo-film/music/save
 * Stores user files
 */
function photo_film_music_save_file() {
  $file_id = array();

  if (!empty($_FILES)) {
    // get the user which try to download file on the server
    global $user;

    foreach ($_FILES as $user_file) {
      if (!empty($_FILES['track-file']['tmp_name']) && $file_name = basename($user_file['name'])) {
        // we need this to se whether file with this name is already exists if does that we will add _0 or _1
        $uri = file_build_uri(variable_get('photo_film_form_music_upload_destination', '')) . '/';
        $future_file_name = file_destination($uri . $file_name, FILE_EXISTS_RENAME);
        $future_file_name = explode('/', $future_file_name);
        $future_file_name = array_pop($future_file_name);

        // get the path of drupal file folder
        $file_path = variable_get('file_public_path', 'sites/default/files') . '/';

        // get the path where admin want to store a file
        $file_path .= variable_get('photo_film_form_music_upload_destination', '') . '/' . $future_file_name;
        // try to save a file and add it to db, if not return false
        if ($file_loaded = drupal_move_uploaded_file($user_file['tmp_name'], getcwd() . '/' . $file_path)) {
          // creating a file object, which will be saved in to the db
          $file = new stdClass();

          $file->uid = $user->uid;
          $file->name = $future_file_name;
          $file->uri = $uri . $future_file_name;
          $file->filemime = file_get_mimetype($file_name);
          $file->filesize = $user_file['size'];
          $uploaded_file = file_save($file);
          // add file id to the result
          $file_id[] = $uploaded_file->fid;
        }
      }
    }
  }

  // output json for js
  drupal_json_output($file_id);
  exit;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function photo_film_form_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Clears the wizard cache.
 *
 * @param integer $id
 *   cache id.
 */
function photo_film_form_cache_clear($id) {
  ctools_include('object-cache');
  ctools_object_cache_clear('photo_film_form', $id);
}

/**
 * Stores our little cache so that we can retain data from form to form.
 *
 * @param integer $id
 *   cache id.
 * @param object $object
 *   object with form values.
 */
function photo_film_form_cache_set($id, $object) {
  ctools_include('object-cache');
  ctools_object_cache_set('photo_film_form', $id, $object);
}

/**
 * Gets the current object from the cache, or default.
 *
 * @param integer $id
 *   cache id.
 *
 * @return object
 *   cache with stored stuff.
 */
function photo_film_form_cache_get($id) {
  ctools_include('object-cache');
  $object = ctools_object_cache_get('photo_film_form', $id);
  if (!$object) {
    // Create a default object.
    $object = new stdClass;
  }

  return $object;
}

/**
 * Handles the 'next' click on the add/edit pane form wizard.
 *
 * All we need to do is store the updated pane in the cache.
 */
function photo_film_form_wizard_next(&$form_state) {
  photo_film_form_cache_set($form_state['object_id'], $form_state['object']);
}

/**
 * Handles the 'finish' click on teh add/edit pane form wizard.
 *
 * All we need to do is set a flag so the return can handle adding
 * the pane.
 */
function photo_film_form_wizard_finish(&$form_state) {
  $form_state['complete'] = TRUE;
}

/**
 * Handles the 'cancel' click on the add/edit pane form wizard.
 */
function photo_film_form_wizard_cancel(&$form_state) {
  $form_state['cancel'] = TRUE;
}


/**
 * Handles submit of first form.
 */
function photo_film_form_start_styles($form, &$form_state) {
  $form_state['object']->name = $form_state['values']['name'];
  $form_state['object']->surname = $form_state['values']['surname'];
}

/**
 * Generates second form.
 *
 * @ingroup forms
 */
function photo_film_form_second($form, &$form_state) {
  $form['know'] = array(
    '#type' => 'checkboxes',
    '#options' => array('php' => t('PHP'), 'css' => t('CSS'), 'jquery' => t('Jquery'), 'unix' => t('Unix')),
    '#default_value' => isset($form_state['object']->know) ? $form_state['object']->know : array(),
  );

  return $form;
}

/**
 * Handles submit for second form.
 */
function photo_film_form_second_submit($form, &$form_state) {
  $form_state['object']->know = $form_state['values']['know'];
}

/**
 * Generates third form.
 *
 * @ingroup forms
 */
function photo_film_form_third($form, &$form_state) {
  $form['drupal'] = array(
    '#type' => 'radios',
    '#options' => array('awesome' => t('Awesome'), 'awful' => t('Awful')),
    '#default_value' => isset($form_state['object']->drupal) ? $form_state['object']->drupal : '',
    '#default_value' => 'awesome',
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Handles submit for third form.
 */
function photo_film_form_third_submit(&$form, &$form_state) {
  $form_state['object']->drupal = $form_state['values']['drupal'];
}

/**
 * Generates fourth form.
 *
 * @ingroup forms
 */
function photo_film_form_fourth($form, &$form_state) {
  $form['work'] = array(
    '#type' => 'radios',
    '#options' => array('yes' => t('Yes'), 'no' => t('No')),
    '#default_value' => 'yes',
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Handles submit for fourth form.
 */
function photo_film_form_fourth_submit(&$form, &$form_state) {
  $form_state['object']->work = $form_state['values']['work'];
}

/**
 * Returns form results.
 *
 * @param object $object
 *   object with form values.
 *
 * @return array
 *   returns renderable array for multistep form result output.
 */
function photo_film_form_get_result($object) {

  return t('Results:');
}